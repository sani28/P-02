@font-face {
    font-family: headerFont;
    src: url(../SentyGoldenBell.ttf);
}


div#heading{
	font-family: 'Libre Baskerville', serif;
  font-style: italic;
	font-size: 2.3rem;
}

div#subheading {
	font-family: 'Libre Baskerville', serif;
	font-size: 1.2rem;
}

div#post {
	font-family: 'Adobe Arabic';
	font-size: 1rem;
	font-style: italic;
}

.bullet-list{
  font-family: 'Cutive Mono', monospace;
	list-style-type: circle;
  margin-left: -30px;
}

.numbered-list{
	font-style: italic;
}

.citations {
	font-size: 10px;
	padding-left: 20%;
}


body {

	font-family: 'Cutive Mono', monospace;
	font-style: normal;


	/*
		Margin sets the spacing outside of the borders of an element's box. Because we are only setting one value below, it makes it the margin value for all sides of our box, which in this case is all sides of our body element.
	*/
	margin: 1rem;

	/*
		Setting a default font size for all elements who are children of the body tag. How 'rems' work are explained in the next comment.
	*/
	font-size: 1.25rem;
}

/*
	With the selection of the different heading elements below, we are using 'rem' units to establish a default hierarchy for their font sizes. Rem units refer to 'root-em' which are a multiple of the base font-size set by the browser. As a result, rem units are particularly useful for establishing hierarchies in type.
*/
h1 {

	font-size: 1rem;

	margin-bottom: 10;
}

h2 {
	font-size: 0.8rem;
	margin-left: 50px;
}

h3 {
	font-size: 1rem;
	margin-bottom: 0;
}

h4 {
  font-size:1.2rem;
  padding:20px;
  margin-bottom: 0;
}

h6{
  font-family: 'Cutive Mono', monospace;
  font-size: 0.2rem;
}


/*
	Below we are setting defaults for a series of selectors. The comma allows us to select a combination of elements.
*/
p, ol, ul {

	/*
		max-width is a property which easily allows us to ensure something does not extend past a certain point in width. In this case, we can use it to make line-lengths more manageable in our text.
	*/
	max-width: 40rem;
	font-family: 'Rasa', serif;
}


img {
	/*
		We are saying we want the img to adjust its height accordingly when the width changes.
	*/
	height: auto;

	/*
		Then we tell it we don't want it to exceed 100% of the parent element. In this case it resizes with the 'body' tag (the browser window).
	*/
	max-width: 100%;

	/*
		Below is a compound statement. In the case of the border property, it sets the width type colour values in that order when given them.
	*/
	border: none;
}

table {

	font-size: 12px;

	box-sizing: border-box;

}

tr td {
	padding: 15px;

}

th, td {
    border-bottom: 1px solid #ddd;
}




a {

	text-decoration: none;
	font-size: 0.8rem;
	/*
		Setting colours for elements can be done in a variety of ways. You can use just the colour name 'blue', you can use a HEX value '#00AAFF', you can specify an rgb value 'rgb(0,200,255)', and you can specify an rgb value with alpha (or opacity) using 'rgba(0,200,255,0.8)' (80%).
	*/
	color: #bf8f6d;
	/*
		The transition property makes it very easy to create smooth transitions for different CSS properties. In this case, we are specifying that we want to transition the 'color' property over 0.5 seconds. Note that you have to have another state for the element for it to actually make use of the transition.
	*/
	transition: color 0.5s;
}

a#in-text {
	font-family: 'Adobe Arabic', serif;
  color: salmon;
}

a:hover#in-text {
	color: black;

}

#nav-button {
	font-family: headerFont, serif;
  text-decoration: none;
	font-weight: 600;
	color: black;
  width: 20%;
  padding: 5%;
  background: #FFF8EA;
}

a#nav-button:hover {
  background: #5B9369;

}

#btn {
	font-family: 'Cutive Mono', serif;
	padding: 4%;
  border: 1px solid darkgrey;
  width: 100px;

}
/*
	The :active, :hover and :focus are pseudo-states for the element. In this case, we are saying when the anchor tag is 'active' (being clicked on), 'hover' (being hovered over), and 'focus' (selected by keyboard, i.e. tab), it should apply the styling specified.
*/
a:active, a:hover, a:focus {
	color: rgb(50,0,0);
	text-decoration: none;
}

code, samp {



	display: block;
	background-color: rgb(230,230,230);
	/*
		While margin sets the space outside of our border box, padding is the space between the border and the content itself.
	*/
	padding: 0.5rem;
}

.style-table {
	padding: 5%;
	padding-top: 3%;
}

.style {
	width: 100%;
}

*, *:after, *:before {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.card {
   box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
   transition: 0.3s;
   width: 100px;
   border-radius: 5px;
}

.card:hover {
    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

.product-image{
  border-radius: 5px 5px 0 0;
}

.container {
  padding: 2px 16px;
}

.grid-container {
  display: grid;
  grid-gap: 10px;
  background-color: grey;
  padding: 10px;
}
.grid-item {
  background-color: lightgrey;
  text-align: center;
  padding: 20px;
  font-size: 30px;
}
.item1 {
  grid-column: 1 / span 3 ;
  grid-row: 3;
  height: 100%;
  margin-bottom: 20%;

}
.item5 {
  grid-column: 1 / span 3;
  grid-row: 1;
  width: 10%;

}

.dropbtn {
    background: #fff;
    color: black;
    padding: 16px;
    font-size: 16px;
    border: none;
}

.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown-content {
    display: none;
    position: absolute;
    background-color: #f1f1f1;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
}

.dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}

.dropdown-content a:hover {background-color: #fff}

.dropdown:hover .dropdown-content {
    display: block;
}

.dropdown:hover .dropbtn {
    background-color: #fff;
}
